// Generated by CoffeeScript 1.6.3
/*
models.coffee v0.1

The base models for function creation.

Released under the MIT License.
*/


(function() {
  var Function, Path, Step, baseValidator;

  baseValidator = function() {
    return true;
  };

  Path = (function() {
    function Path(start, end, validator) {
      this.start = start;
      this.end = end;
      this.validator = validator != null ? validator : baseValidator;
    }

    Path.prototype.call = function(input) {
      if (this.validator(input)) {
        return this.end.call(input);
      }
    };

    return Path;

  })();

  Step = (function() {
    function Step(paths, _function) {
      this.paths = paths != null ? paths : [];
      this["function"] = _function;
    }

    Step.prototype.addPath = function(end) {
      return this.paths.push(new Path(this, end));
    };

    Step.prototype.call = function(input) {
      var output, path, _i, _len, _ref, _results;
      output = this["function"].call(input);
      if (this.paths.length === 0) {
        output;
      }
      _ref = this.paths;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        _results.push(path.call(output));
      }
      return _results;
    };

    return Step;

  })();

  Function = (function() {
    /*
    A process is a Step connected to other Steps that can be run as a procedure
    and in turn be a Step.
    */

    function Function(start, name, description) {
      this.start = start;
      this.name = name;
      this.description = description;
    }

    Function.prototype.call = function(input) {
      console.log("Running function " + this.name + ".");
      return this.start.call(input);
    };

    return Function;

  })();

}).call(this);
